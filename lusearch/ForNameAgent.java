import java.lang.instrument.Instrumentation;

public class ForNameAgent extends ClassLoader {
	
	static {
		try {
			
			Class clazz;

			clazz = Class.forName("Harness");
			clazz = Class.forName("org.apache.lucene.analysis.Analyzer");
			clazz = Class.forName("org.apache.lucene.analysis.CharArraySet");
			clazz = Class.forName("org.apache.lucene.analysis.CharTokenizer");
			clazz = Class.forName("org.apache.lucene.analysis.LetterTokenizer");
			clazz = Class.forName("org.apache.lucene.analysis.LowerCaseFilter");
			clazz = Class.forName("org.apache.lucene.analysis.LowerCaseTokenizer");
			clazz = Class.forName("org.apache.lucene.analysis.SimpleAnalyzer");
			clazz = Class.forName("org.apache.lucene.analysis.StopAnalyzer");
			clazz = Class.forName("org.apache.lucene.analysis.StopFilter");
			clazz = Class.forName("org.apache.lucene.analysis.Token");
			clazz = Class.forName("org.apache.lucene.analysis.TokenFilter");
			clazz = Class.forName("org.apache.lucene.analysis.TokenStream");
			clazz = Class.forName("org.apache.lucene.analysis.Tokenizer");
			clazz = Class.forName("org.apache.lucene.analysis.standard.StandardAnalyzer$SavedStreams");
			clazz = Class.forName("org.apache.lucene.analysis.standard.StandardAnalyzer");
			clazz = Class.forName("org.apache.lucene.analysis.standard.StandardFilter");
			clazz = Class.forName("org.apache.lucene.analysis.standard.StandardTokenizer");
			clazz = Class.forName("org.apache.lucene.analysis.standard.StandardTokenizerImpl");
			clazz = Class.forName("org.apache.lucene.document.AbstractField");
			clazz = Class.forName("org.apache.lucene.document.Document");
			clazz = Class.forName("org.apache.lucene.document.Field$Index");
			clazz = Class.forName("org.apache.lucene.document.Field$Store");
			clazz = Class.forName("org.apache.lucene.document.Field$TermVector");
			clazz = Class.forName("org.apache.lucene.document.Field");
			clazz = Class.forName("org.apache.lucene.document.FieldSelector");
			clazz = Class.forName("org.apache.lucene.document.FieldSelectorResult");
			clazz = Class.forName("org.apache.lucene.document.Fieldable");
			clazz = Class.forName("org.apache.lucene.index.CompoundFileReader$CSIndexInput");
			clazz = Class.forName("org.apache.lucene.index.CompoundFileReader$FileEntry");
			clazz = Class.forName("org.apache.lucene.index.CompoundFileReader");
			clazz = Class.forName("org.apache.lucene.index.CorruptIndexException");
			clazz = Class.forName("org.apache.lucene.index.DirectoryIndexReader$1");
			clazz = Class.forName("org.apache.lucene.index.DirectoryIndexReader$2");
			clazz = Class.forName("org.apache.lucene.index.DirectoryIndexReader$ReaderCommit");
			clazz = Class.forName("org.apache.lucene.index.DirectoryIndexReader");
			clazz = Class.forName("org.apache.lucene.index.FieldInfo");
			clazz = Class.forName("org.apache.lucene.index.FieldInfos");
			clazz = Class.forName("org.apache.lucene.index.FieldsReader");
			clazz = Class.forName("org.apache.lucene.index.FilterIndexReader");
			clazz = Class.forName("org.apache.lucene.index.IndexCommit");
			clazz = Class.forName("org.apache.lucene.index.IndexCommitPoint");
			clazz = Class.forName("org.apache.lucene.index.IndexDeletionPolicy");
			clazz = Class.forName("org.apache.lucene.index.IndexFileNameFilter");
			clazz = Class.forName("org.apache.lucene.index.IndexFileNames");
			clazz = Class.forName("org.apache.lucene.index.IndexReader");
			clazz = Class.forName("org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy");
			clazz = Class.forName("org.apache.lucene.index.MultiSegmentReader");
			clazz = Class.forName("org.apache.lucene.index.ReadOnlyMultiSegmentReader");
			clazz = Class.forName("org.apache.lucene.index.ReadOnlySegmentReader");
			clazz = Class.forName("org.apache.lucene.index.SegmentInfo");
			clazz = Class.forName("org.apache.lucene.index.SegmentInfos$FindSegmentsFile");
			clazz = Class.forName("org.apache.lucene.index.SegmentInfos");
			clazz = Class.forName("org.apache.lucene.index.SegmentMerger");
			clazz = Class.forName("org.apache.lucene.index.SegmentReader$Norm");
			clazz = Class.forName("org.apache.lucene.index.SegmentReader");
			clazz = Class.forName("org.apache.lucene.index.SegmentTermDocs");
			clazz = Class.forName("org.apache.lucene.index.SegmentTermEnum");
			clazz = Class.forName("org.apache.lucene.index.StaleReaderException");
			clazz = Class.forName("org.apache.lucene.index.Term");
			clazz = Class.forName("org.apache.lucene.index.TermBuffer");
			clazz = Class.forName("org.apache.lucene.index.TermDocs");
			clazz = Class.forName("org.apache.lucene.index.TermEnum");
			clazz = Class.forName("org.apache.lucene.index.TermInfo");
			clazz = Class.forName("org.apache.lucene.index.TermInfosReader$ThreadResources");
			clazz = Class.forName("org.apache.lucene.index.TermInfosReader");
			clazz = Class.forName("org.apache.lucene.index.TermPositions");
			clazz = Class.forName("org.apache.lucene.queryParser.CharStream");
			clazz = Class.forName("org.apache.lucene.queryParser.FastCharStream");
			clazz = Class.forName("org.apache.lucene.queryParser.ParseException");
			clazz = Class.forName("org.apache.lucene.queryParser.QueryParser$JJCalls");
			clazz = Class.forName("org.apache.lucene.queryParser.QueryParser$LookaheadSuccess");
			clazz = Class.forName("org.apache.lucene.queryParser.QueryParser$Operator");
			clazz = Class.forName("org.apache.lucene.queryParser.QueryParser");
			clazz = Class.forName("org.apache.lucene.queryParser.QueryParserConstants");
			clazz = Class.forName("org.apache.lucene.queryParser.QueryParserTokenManager");
			clazz = Class.forName("org.apache.lucene.queryParser.Token");
			clazz = Class.forName("org.apache.lucene.queryParser.TokenMgrError");
			clazz = Class.forName("org.apache.lucene.search.BooleanClause$Occur");
			clazz = Class.forName("org.apache.lucene.search.BooleanClause");
			clazz = Class.forName("org.apache.lucene.search.BooleanQuery$1");
			clazz = Class.forName("org.apache.lucene.search.BooleanQuery$BooleanWeight");
			clazz = Class.forName("org.apache.lucene.search.BooleanQuery$TooManyClauses");
			clazz = Class.forName("org.apache.lucene.search.BooleanQuery");
			clazz = Class.forName("org.apache.lucene.search.BooleanScorer2$1");
			clazz = Class.forName("org.apache.lucene.search.BooleanScorer2$2");
			clazz = Class.forName("org.apache.lucene.search.BooleanScorer2$Coordinator");
			clazz = Class.forName("org.apache.lucene.search.BooleanScorer2$SingleMatchScorer");
			clazz = Class.forName("org.apache.lucene.search.BooleanScorer2");
			clazz = Class.forName("org.apache.lucene.search.ComplexExplanation");
			clazz = Class.forName("org.apache.lucene.search.ConjunctionScorer");
			clazz = Class.forName("org.apache.lucene.search.ConstantScoreRangeQuery");
			clazz = Class.forName("org.apache.lucene.search.DefaultSimilarity");
			clazz = Class.forName("org.apache.lucene.search.DisjunctionSumScorer");
			clazz = Class.forName("org.apache.lucene.search.DocIdSetIterator");
			clazz = Class.forName("org.apache.lucene.search.Explanation");
			clazz = Class.forName("org.apache.lucene.search.Filter");
			clazz = Class.forName("org.apache.lucene.search.FuzzyQuery");
			clazz = Class.forName("org.apache.lucene.search.HitCollector");
			clazz = Class.forName("org.apache.lucene.search.HitQueue");
			clazz = Class.forName("org.apache.lucene.search.IndexSearcher");
			clazz = Class.forName("org.apache.lucene.search.MatchAllDocsQuery");
			clazz = Class.forName("org.apache.lucene.search.MultiPhraseQuery");
			clazz = Class.forName("org.apache.lucene.search.MultiTermQuery");
			clazz = Class.forName("org.apache.lucene.search.NonMatchingScorer");
			clazz = Class.forName("org.apache.lucene.search.PhraseQuery");
			clazz = Class.forName("org.apache.lucene.search.PrefixQuery");
			clazz = Class.forName("org.apache.lucene.search.Query");
			clazz = Class.forName("org.apache.lucene.search.RangeQuery");
			clazz = Class.forName("org.apache.lucene.search.ReqExclScorer");
			clazz = Class.forName("org.apache.lucene.search.ReqOptSumScorer");
			clazz = Class.forName("org.apache.lucene.search.ScoreDoc");
			clazz = Class.forName("org.apache.lucene.search.Scorer");
			clazz = Class.forName("org.apache.lucene.search.Searchable");
			clazz = Class.forName("org.apache.lucene.search.Searcher");
			clazz = Class.forName("org.apache.lucene.search.Similarity");
			clazz = Class.forName("org.apache.lucene.search.SimilarityDelegator");
			clazz = Class.forName("org.apache.lucene.search.TermQuery$TermWeight");
			clazz = Class.forName("org.apache.lucene.search.TermQuery");
			clazz = Class.forName("org.apache.lucene.search.TermScorer");
			clazz = Class.forName("org.apache.lucene.search.TopDocCollector");
			clazz = Class.forName("org.apache.lucene.search.TopDocs");
			clazz = Class.forName("org.apache.lucene.search.TopFieldDocCollector");
			clazz = Class.forName("org.apache.lucene.search.Weight");
			clazz = Class.forName("org.apache.lucene.search.WildcardQuery");
			clazz = Class.forName("org.apache.lucene.store.AlreadyClosedException");
			clazz = Class.forName("org.apache.lucene.store.BufferedIndexInput");
			clazz = Class.forName("org.apache.lucene.store.BufferedIndexOutput");
			clazz = Class.forName("org.apache.lucene.store.ChecksumIndexInput");
			clazz = Class.forName("org.apache.lucene.store.ChecksumIndexOutput");
			clazz = Class.forName("org.apache.lucene.store.Directory");
			clazz = Class.forName("org.apache.lucene.store.FSDirectory$FSIndexInput$Descriptor");
			clazz = Class.forName("org.apache.lucene.store.FSDirectory$FSIndexInput");
			clazz = Class.forName("org.apache.lucene.store.FSDirectory$FSIndexOutput");
			clazz = Class.forName("org.apache.lucene.store.FSDirectory");
			clazz = Class.forName("org.apache.lucene.store.IndexInput");
			clazz = Class.forName("org.apache.lucene.store.IndexOutput");
			clazz = Class.forName("org.apache.lucene.store.Lock");
			clazz = Class.forName("org.apache.lucene.store.LockFactory");
			clazz = Class.forName("org.apache.lucene.store.LockObtainFailedException");
			clazz = Class.forName("org.apache.lucene.store.NoLockFactory");
			clazz = Class.forName("org.apache.lucene.store.SimpleFSLock");
			clazz = Class.forName("org.apache.lucene.store.SimpleFSLockFactory");
			clazz = Class.forName("org.apache.lucene.util.CloseableThreadLocal");
			clazz = Class.forName("org.apache.lucene.util.Parameter");
			clazz = Class.forName("org.apache.lucene.util.PriorityQueue");
			clazz = Class.forName("org.apache.lucene.util.SmallFloat");
			clazz = Class.forName("org.apache.lucene.util.ToStringUtils");
			clazz = Class.forName("org.apache.lucene.util.UnicodeUtil$UTF16Result");
			clazz = Class.forName("org.apache.lucene.util.UnicodeUtil$UTF8Result");
			clazz = Class.forName("org.apache.lucene.util.UnicodeUtil");
			clazz = Class.forName("org.apache.lucene.util.cache.Cache$SynchronizedCache");
			clazz = Class.forName("org.apache.lucene.util.cache.Cache");
			clazz = Class.forName("org.apache.lucene.util.cache.SimpleLRUCache$1");
			clazz = Class.forName("org.apache.lucene.util.cache.SimpleLRUCache");
			clazz = Class.forName("org.apache.lucene.util.cache.SimpleMapCache$SynchronizedSimpleMapCache");
			clazz = Class.forName("org.apache.lucene.util.cache.SimpleMapCache");
			clazz = Class.forName("org.dacapo.harness.Benchmark");
			clazz = Class.forName("org.dacapo.harness.Callback$1");
			clazz = Class.forName("org.dacapo.harness.Callback$Mode");
			clazz = Class.forName("org.dacapo.harness.Callback");
			clazz = Class.forName("org.dacapo.harness.CommandLineArgs$Methodology");
			clazz = Class.forName("org.dacapo.harness.CommandLineArgs");
			clazz = Class.forName("org.dacapo.harness.DacapoClassLoader");
			clazz = Class.forName("org.dacapo.harness.DacapoException");
			clazz = Class.forName("org.dacapo.harness.Digest");
			clazz = Class.forName("org.dacapo.harness.FileDigest");
			clazz = Class.forName("org.dacapo.harness.Lusearch");
			clazz = Class.forName("org.dacapo.harness.TeeOutputStream");
			clazz = Class.forName("org.dacapo.harness.TeePrintStream");
			clazz = Class.forName("org.dacapo.harness.TestHarness");
			clazz = Class.forName("org.dacapo.lusearch.Search$OneNormsReader");
			clazz = Class.forName("org.dacapo.lusearch.Search$QueryProcessor");
			clazz = Class.forName("org.dacapo.lusearch.Search$QueryThread");
			clazz = Class.forName("org.dacapo.lusearch.Search");
			clazz = Class.forName("org.dacapo.parser.Config$1");
			clazz = Class.forName("org.dacapo.parser.Config$OutputFile");
			clazz = Class.forName("org.dacapo.parser.Config$Size");
			clazz = Class.forName("org.dacapo.parser.Config$ThreadModel");
			clazz = Class.forName("org.dacapo.parser.Config");
			clazz = Class.forName("org.dacapo.parser.ConfigFile");
			clazz = Class.forName("org.dacapo.parser.ConfigFileConstants");
			clazz = Class.forName("org.dacapo.parser.ConfigFileTokenManager");
			clazz = Class.forName("org.dacapo.parser.ParseException");
			clazz = Class.forName("org.dacapo.parser.SimpleCharStream");
			clazz = Class.forName("org.dacapo.parser.Token");
			clazz = Class.forName("org.dacapo.parser.TokenMgrError");
			clazz = Class.forName("soot.rtlib.tamiflex.DefaultHandler");
			clazz = Class.forName("soot.rtlib.tamiflex.IUnexpectedReflectiveCallHandler");
			clazz = Class.forName("soot.rtlib.tamiflex.OpaquePredicate");
			clazz = Class.forName("soot.rtlib.tamiflex.ReflectiveCalls");
			clazz = Class.forName("soot.rtlib.tamiflex.ReflectiveCallsWrapper");
			clazz = Class.forName("soot.rtlib.tamiflex.SootSig");
			clazz = Class.forName("soot.rtlib.tamiflex.UnexpectedReflectiveCall");


		} catch (Exception ex ) {
			assert(false) : ex.toString();
		}
	}
	
	public static void premain(String args, Instrumentation inst) {
		System.out.println("Class Resolver Agent begin");

	}
}
