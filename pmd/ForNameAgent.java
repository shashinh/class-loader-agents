import java.lang.instrument.Instrumentation;

public class ForNameAgent extends ClassLoader {
	
	static {
		try {
			
			Class clazz;
			clazz = Class.forName("Harness");
			clazz = Class.forName("dacapo.Benchmark");
			clazz = Class.forName("dacapo.Callback");
			clazz = Class.forName("dacapo.DacapoException");
			clazz = Class.forName("dacapo.Digest");
			clazz = Class.forName("dacapo.FileDigest");
			clazz = Class.forName("dacapo.TeeOutputStream");
			clazz = Class.forName("dacapo.TeePrintStream");
			clazz = Class.forName("dacapo.TestHarness");
			clazz = Class.forName("dacapo.parser.Config$OutputFile");
			clazz = Class.forName("dacapo.parser.Config$Size");
			clazz = Class.forName("dacapo.parser.Config");
			clazz = Class.forName("dacapo.parser.ConfigFile");
			clazz = Class.forName("dacapo.parser.ConfigFileConstants");
			clazz = Class.forName("dacapo.parser.ConfigFileTokenManager");
			clazz = Class.forName("dacapo.parser.ParseException");
			clazz = Class.forName("dacapo.parser.SimpleCharStream");
			clazz = Class.forName("dacapo.parser.Token");
			clazz = Class.forName("dacapo.parser.TokenMgrError");
			clazz = Class.forName("dacapo.pmd.PmdHarness");
			clazz = Class.forName("net.sourceforge.pmd.AbstractRule");
			clazz = Class.forName("net.sourceforge.pmd.CommandLineOptions");
			clazz = Class.forName("net.sourceforge.pmd.CommonAbstractRule");
			clazz = Class.forName("net.sourceforge.pmd.DataSource");
			clazz = Class.forName("net.sourceforge.pmd.ExcludeLines");
			clazz = Class.forName("net.sourceforge.pmd.FileDataSource");
			clazz = Class.forName("net.sourceforge.pmd.IRuleViolation");
			clazz = Class.forName("net.sourceforge.pmd.Language");
			clazz = Class.forName("net.sourceforge.pmd.PMD");
			clazz = Class.forName("net.sourceforge.pmd.PMDException");
			clazz = Class.forName("net.sourceforge.pmd.Report");
			clazz = Class.forName("net.sourceforge.pmd.Rule");
			clazz = Class.forName("net.sourceforge.pmd.RuleContext");
			clazz = Class.forName("net.sourceforge.pmd.RuleSet");
			clazz = Class.forName("net.sourceforge.pmd.RuleSetFactory");
			clazz = Class.forName("net.sourceforge.pmd.RuleSetNotFoundException");
			clazz = Class.forName("net.sourceforge.pmd.RuleSets");
			clazz = Class.forName("net.sourceforge.pmd.RuleViolation$RuleViolationComparator");
			clazz = Class.forName("net.sourceforge.pmd.RuleViolation");
			clazz = Class.forName("net.sourceforge.pmd.SimpleRuleSetNameMapper");
			clazz = Class.forName("net.sourceforge.pmd.SourceFileSelector");
			clazz = Class.forName("net.sourceforge.pmd.SourceType");
			clazz = Class.forName("net.sourceforge.pmd.SourceTypeDiscoverer");
			clazz = Class.forName("net.sourceforge.pmd.SourceTypeToRuleLanguageMapper");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTAdditiveExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTAllocationExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTAndExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTAnnotation");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTAnnotationTypeBody");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTAnnotationTypeDeclaration");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTAnnotationTypeMemberDeclaration");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTArgumentList");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTArguments");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTArrayDimsAndInits");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTArrayInitializer");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTAssertStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTAssignmentOperator");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTBlock");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTBlockStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTBooleanLiteral");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTBreakStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTCastExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTCastLookahead");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTCatchStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTClassOrInterfaceBody");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTClassOrInterfaceBodyDeclaration");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTClassOrInterfaceDeclaration");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTClassOrInterfaceType");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTCompilationUnit");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTConditionalAndExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTConditionalExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTConditionalOrExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTConstructorDeclaration");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTContinueStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTDefaultValue");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTDoStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTEmptyStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTEnumBody");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTEnumConstant");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTEnumDeclaration");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTEnumElement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTEqualityExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTExclusiveOrExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTExplicitConstructorInvocation");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTExtendsList");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTFieldDeclaration");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTFinallyStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTForInit");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTForStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTForUpdate");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTFormalParameter");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTFormalParameters");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTIfStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTImplementsList");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTImportDeclaration");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTInclusiveOrExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTInitializer");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTInstanceOfExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTLabeledStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTLiteral");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTLocalVariableDeclaration");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTMarkerAnnotation");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTMemberSelector");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTMemberValue");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTMemberValueArrayInitializer");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTMemberValuePair");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTMemberValuePairs");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTMethodDeclaration");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTMethodDeclarationLookahead");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTMethodDeclarator");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTModifiers");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTMultiplicativeExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTName");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTNameList");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTNormalAnnotation");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTNullLiteral");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTPackageDeclaration");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTPostfixExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTPreDecrementExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTPreIncrementExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTPrimaryExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTPrimaryPrefix");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTPrimarySuffix");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTPrimitiveType");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTRSIGNEDSHIFT");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTRUNSIGNEDSHIFT");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTReferenceType");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTRelationalExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTResultType");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTReturnStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTShiftExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTSingleMemberAnnotation");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTStatementExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTStatementExpressionList");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTSwitchLabel");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTSwitchStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTSynchronizedStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTThrowStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTTryStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTType");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTTypeArgument");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTTypeArguments");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTTypeBound");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTTypeDeclaration");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTTypeParameter");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTTypeParameters");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTUnaryExpression");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTUnaryExpressionNotPlusMinus");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTVariableDeclarator");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTVariableDeclaratorId");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTVariableInitializer");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTWhileStatement");
			clazz = Class.forName("net.sourceforge.pmd.ast.ASTWildcardBounds");
			clazz = Class.forName("net.sourceforge.pmd.ast.AccessNode");
			clazz = Class.forName("net.sourceforge.pmd.ast.CanSuppressWarnings");
			clazz = Class.forName("net.sourceforge.pmd.ast.CharStream");
			clazz = Class.forName("net.sourceforge.pmd.ast.CompilationUnit");
			clazz = Class.forName("net.sourceforge.pmd.ast.Dimensionable");
			clazz = Class.forName("net.sourceforge.pmd.ast.JJTJavaParserState");
			clazz = Class.forName("net.sourceforge.pmd.ast.JavaCharStream");
			clazz = Class.forName("net.sourceforge.pmd.ast.JavaNode");
			clazz = Class.forName("net.sourceforge.pmd.ast.JavaParser$JJCalls");
			clazz = Class.forName("net.sourceforge.pmd.ast.JavaParser$LookaheadSuccess");
			clazz = Class.forName("net.sourceforge.pmd.ast.JavaParser");
			clazz = Class.forName("net.sourceforge.pmd.ast.JavaParserConstants");
			clazz = Class.forName("net.sourceforge.pmd.ast.JavaParserTokenManager");
			clazz = Class.forName("net.sourceforge.pmd.ast.JavaParserTreeConstants");
			clazz = Class.forName("net.sourceforge.pmd.ast.JavaParserVisitor");
			clazz = Class.forName("net.sourceforge.pmd.ast.JavaParserVisitorAdapter");
			clazz = Class.forName("net.sourceforge.pmd.ast.Node");
			clazz = Class.forName("net.sourceforge.pmd.ast.ParseException");
			clazz = Class.forName("net.sourceforge.pmd.ast.SimpleJavaNode");
			clazz = Class.forName("net.sourceforge.pmd.ast.SimpleNode");
			clazz = Class.forName("net.sourceforge.pmd.ast.Token$GTToken");
			clazz = Class.forName("net.sourceforge.pmd.ast.Token");
			clazz = Class.forName("net.sourceforge.pmd.ast.TokenMgrError");
			clazz = Class.forName("net.sourceforge.pmd.dfa.DataFlowFacade");
			clazz = Class.forName("net.sourceforge.pmd.dfa.IDataFlowNode");
			clazz = Class.forName("net.sourceforge.pmd.dfa.report.AbstractReportNode");
			clazz = Class.forName("net.sourceforge.pmd.dfa.report.ClassNode");
			clazz = Class.forName("net.sourceforge.pmd.dfa.report.PackageNode");
			clazz = Class.forName("net.sourceforge.pmd.dfa.report.ReportTree");
			clazz = Class.forName("net.sourceforge.pmd.dfa.report.ViolationNode");
			clazz = Class.forName("net.sourceforge.pmd.jaxen.Attribute");
			clazz = Class.forName("net.sourceforge.pmd.jaxen.AttributeAxisIterator$MethodWrapper");
			clazz = Class.forName("net.sourceforge.pmd.jaxen.AttributeAxisIterator");
			clazz = Class.forName("net.sourceforge.pmd.jaxen.DocumentNavigator$1");
			clazz = Class.forName("net.sourceforge.pmd.jaxen.DocumentNavigator$2");
			clazz = Class.forName("net.sourceforge.pmd.jaxen.DocumentNavigator");
			clazz = Class.forName("net.sourceforge.pmd.jaxen.MatchesFunction");
			clazz = Class.forName("net.sourceforge.pmd.jaxen.NodeIterator");
			clazz = Class.forName("net.sourceforge.pmd.parsers.Java14Parser");
			clazz = Class.forName("net.sourceforge.pmd.parsers.Parser");
			clazz = Class.forName("net.sourceforge.pmd.renderers.AbstractRenderer");
			clazz = Class.forName("net.sourceforge.pmd.renderers.Renderer");
			clazz = Class.forName("net.sourceforge.pmd.renderers.TextRenderer");
			clazz = Class.forName("net.sourceforge.pmd.rules.DoubleCheckedLocking");
			clazz = Class.forName("net.sourceforge.pmd.rules.UnnecessaryConversionTemporary");
			clazz = Class.forName("net.sourceforge.pmd.rules.UselessOverridingMethod");
			clazz = Class.forName("net.sourceforge.pmd.rules.XPathRule$1");
			clazz = Class.forName("net.sourceforge.pmd.rules.XPathRule");
			clazz = Class.forName("net.sourceforge.pmd.sourcetypehandlers.DummyVisitorStarter");
			clazz = Class.forName("net.sourceforge.pmd.sourcetypehandlers.Java13Handler");
			clazz = Class.forName("net.sourceforge.pmd.sourcetypehandlers.Java14Handler");
			clazz = Class.forName("net.sourceforge.pmd.sourcetypehandlers.Java15Handler");
			clazz = Class.forName("net.sourceforge.pmd.sourcetypehandlers.JavaTypeHandler$2");
			clazz = Class.forName("net.sourceforge.pmd.sourcetypehandlers.JavaTypeHandler");
			clazz = Class.forName("net.sourceforge.pmd.sourcetypehandlers.JspTypeHandler");
			clazz = Class.forName("net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandler");
			clazz = Class.forName("net.sourceforge.pmd.sourcetypehandlers.SourceTypeHandlerBroker");
			clazz = Class.forName("net.sourceforge.pmd.sourcetypehandlers.VisitorStarter");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.AbstractNameDeclaration");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.AbstractScope");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.ClassNameDeclaration");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.ClassScope");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.ImageFinderFunction");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.LocalScope");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.MethodNameDeclaration");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.MethodScope");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.NameDeclaration");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.NameFinder");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.NameOccurrence");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.OccurrenceFinder");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.Scope");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.ScopeAndDeclarationFinder");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.Search");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.SourceFileScope");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.SymbolFacade");
			clazz = Class.forName("net.sourceforge.pmd.symboltable.VariableNameDeclaration");
			clazz = Class.forName("net.sourceforge.pmd.util.Applier");
			clazz = Class.forName("net.sourceforge.pmd.util.ResourceLoader");
			clazz = Class.forName("net.sourceforge.pmd.util.UnaryFunction");
			clazz = Class.forName("org.apache.xerces.dom.AttrImpl");
			clazz = Class.forName("org.apache.xerces.dom.AttrNSImpl");
			clazz = Class.forName("org.apache.xerces.dom.AttributeMap");
			clazz = Class.forName("org.apache.xerces.dom.CDATASectionImpl");
			clazz = Class.forName("org.apache.xerces.dom.CharacterDataImpl$1");
			clazz = Class.forName("org.apache.xerces.dom.CharacterDataImpl");
			clazz = Class.forName("org.apache.xerces.dom.ChildNode");
			clazz = Class.forName("org.apache.xerces.dom.CommentImpl");
			clazz = Class.forName("org.apache.xerces.dom.CoreDocumentImpl");
			clazz = Class.forName("org.apache.xerces.dom.DeferredAttrImpl");
			clazz = Class.forName("org.apache.xerces.dom.DeferredAttrNSImpl");
			clazz = Class.forName("org.apache.xerces.dom.DeferredCDATASectionImpl");
			clazz = Class.forName("org.apache.xerces.dom.DeferredCommentImpl");
			clazz = Class.forName("org.apache.xerces.dom.DeferredDocumentImpl$RefCount");
			clazz = Class.forName("org.apache.xerces.dom.DeferredDocumentImpl");
			clazz = Class.forName("org.apache.xerces.dom.DeferredDocumentTypeImpl");
			clazz = Class.forName("org.apache.xerces.dom.DeferredElementDefinitionImpl");
			clazz = Class.forName("org.apache.xerces.dom.DeferredElementImpl");
			clazz = Class.forName("org.apache.xerces.dom.DeferredElementNSImpl");
			clazz = Class.forName("org.apache.xerces.dom.DeferredEntityImpl");
			clazz = Class.forName("org.apache.xerces.dom.DeferredEntityReferenceImpl");
			clazz = Class.forName("org.apache.xerces.dom.DeferredNode");
			clazz = Class.forName("org.apache.xerces.dom.DeferredNotationImpl");
			clazz = Class.forName("org.apache.xerces.dom.DeferredProcessingInstructionImpl");
			clazz = Class.forName("org.apache.xerces.dom.DeferredTextImpl");
			clazz = Class.forName("org.apache.xerces.dom.DocumentImpl");
			clazz = Class.forName("org.apache.xerces.dom.DocumentTypeImpl");
			clazz = Class.forName("org.apache.xerces.dom.ElementDefinitionImpl");
			clazz = Class.forName("org.apache.xerces.dom.ElementImpl");
			clazz = Class.forName("org.apache.xerces.dom.ElementNSImpl");
			clazz = Class.forName("org.apache.xerces.dom.EntityImpl");
			clazz = Class.forName("org.apache.xerces.dom.EntityReferenceImpl");
			clazz = Class.forName("org.apache.xerces.dom.NamedNodeMapImpl");
			clazz = Class.forName("org.apache.xerces.dom.NodeImpl");
			clazz = Class.forName("org.apache.xerces.dom.NodeListCache");
			clazz = Class.forName("org.apache.xerces.dom.NotationImpl");
			clazz = Class.forName("org.apache.xerces.dom.ParentNode");
			clazz = Class.forName("org.apache.xerces.dom.ProcessingInstructionImpl");
			clazz = Class.forName("org.apache.xerces.dom.TextImpl");
			clazz = Class.forName("org.apache.xerces.impl.Constants$ArrayEnumeration");
			clazz = Class.forName("org.apache.xerces.impl.Constants");
			clazz = Class.forName("org.apache.xerces.impl.RevalidationHandler");
			clazz = Class.forName("org.apache.xerces.impl.XML11DTDScannerImpl");
			clazz = Class.forName("org.apache.xerces.impl.XML11DocumentScannerImpl");
			clazz = Class.forName("org.apache.xerces.impl.XML11EntityScanner");
			clazz = Class.forName("org.apache.xerces.impl.XML11NSDocumentScannerImpl");
			clazz = Class.forName("org.apache.xerces.impl.XMLDTDScannerImpl");
			clazz = Class.forName("org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$Dispatcher");
			clazz = Class.forName("org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$ElementStack");
			clazz = Class.forName("org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher");
			clazz = Class.forName("org.apache.xerces.impl.XMLDocumentFragmentScannerImpl");
			clazz = Class.forName("org.apache.xerces.impl.XMLDocumentScannerImpl$ContentDispatcher");
			clazz = Class.forName("org.apache.xerces.impl.XMLDocumentScannerImpl$DTDDispatcher");
			clazz = Class.forName("org.apache.xerces.impl.XMLDocumentScannerImpl$PrologDispatcher");
			clazz = Class.forName("org.apache.xerces.impl.XMLDocumentScannerImpl$TrailingMiscDispatcher");
			clazz = Class.forName("org.apache.xerces.impl.XMLDocumentScannerImpl$XMLDeclDispatcher");
			clazz = Class.forName("org.apache.xerces.impl.XMLDocumentScannerImpl");
			clazz = Class.forName("org.apache.xerces.impl.XMLEntityHandler");
			clazz = Class.forName("org.apache.xerces.impl.XMLEntityManager$CharacterBuffer");
			clazz = Class.forName("org.apache.xerces.impl.XMLEntityManager$CharacterBufferPool");
			clazz = Class.forName("org.apache.xerces.impl.XMLEntityManager$Entity");
			clazz = Class.forName("org.apache.xerces.impl.XMLEntityManager$ExternalEntity");
			clazz = Class.forName("org.apache.xerces.impl.XMLEntityManager$InternalEntity");
			clazz = Class.forName("org.apache.xerces.impl.XMLEntityManager$RewindableInputStream");
			clazz = Class.forName("org.apache.xerces.impl.XMLEntityManager$ScannedEntity");
			clazz = Class.forName("org.apache.xerces.impl.XMLEntityManager");
			clazz = Class.forName("org.apache.xerces.impl.XMLEntityScanner");
			clazz = Class.forName("org.apache.xerces.impl.XMLErrorReporter");
			clazz = Class.forName("org.apache.xerces.impl.XMLNSDocumentScannerImpl$NSContentDispatcher");
			clazz = Class.forName("org.apache.xerces.impl.XMLNSDocumentScannerImpl");
			clazz = Class.forName("org.apache.xerces.impl.XMLScanner");
			clazz = Class.forName("org.apache.xerces.impl.XMLVersionDetector");
			clazz = Class.forName("org.apache.xerces.impl.dtd.BalancedDTDGrammar");
			clazz = Class.forName("org.apache.xerces.impl.dtd.DTDGrammar");
			clazz = Class.forName("org.apache.xerces.impl.dtd.DTDGrammarBucket");
			clazz = Class.forName("org.apache.xerces.impl.dtd.XML11DTDProcessor");
			clazz = Class.forName("org.apache.xerces.impl.dtd.XML11DTDValidator");
			clazz = Class.forName("org.apache.xerces.impl.dtd.XML11NSDTDValidator");
			clazz = Class.forName("org.apache.xerces.impl.dtd.XMLAttributeDecl");
			clazz = Class.forName("org.apache.xerces.impl.dtd.XMLDTDDescription");
			clazz = Class.forName("org.apache.xerces.impl.dtd.XMLDTDLoader");
			clazz = Class.forName("org.apache.xerces.impl.dtd.XMLDTDProcessor");
			clazz = Class.forName("org.apache.xerces.impl.dtd.XMLDTDValidator");
			clazz = Class.forName("org.apache.xerces.impl.dtd.XMLDTDValidatorFilter");
			clazz = Class.forName("org.apache.xerces.impl.dtd.XMLElementDecl");
			clazz = Class.forName("org.apache.xerces.impl.dtd.XMLEntityDecl");
			clazz = Class.forName("org.apache.xerces.impl.dtd.XMLNSDTDValidator");
			clazz = Class.forName("org.apache.xerces.impl.dtd.XMLSimpleType");
			clazz = Class.forName("org.apache.xerces.impl.dv.DTDDVFactory");
			clazz = Class.forName("org.apache.xerces.impl.dv.DVFactoryException");
			clazz = Class.forName("org.apache.xerces.impl.dv.DatatypeException");
			clazz = Class.forName("org.apache.xerces.impl.dv.DatatypeValidator");
			clazz = Class.forName("org.apache.xerces.impl.dv.InvalidDatatypeValueException");
			clazz = Class.forName("org.apache.xerces.impl.dv.ObjectFactory$ConfigurationError");
			clazz = Class.forName("org.apache.xerces.impl.dv.ObjectFactory");
			clazz = Class.forName("org.apache.xerces.impl.dv.SecuritySupport$1");
			clazz = Class.forName("org.apache.xerces.impl.dv.SecuritySupport$2");
			clazz = Class.forName("org.apache.xerces.impl.dv.SecuritySupport");
			clazz = Class.forName("org.apache.xerces.impl.dv.ValidationContext");
			clazz = Class.forName("org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl");
			clazz = Class.forName("org.apache.xerces.impl.dv.dtd.ENTITYDatatypeValidator");
			clazz = Class.forName("org.apache.xerces.impl.dv.dtd.IDDatatypeValidator");
			clazz = Class.forName("org.apache.xerces.impl.dv.dtd.IDREFDatatypeValidator");
			clazz = Class.forName("org.apache.xerces.impl.dv.dtd.ListDatatypeValidator");
			clazz = Class.forName("org.apache.xerces.impl.dv.dtd.NMTOKENDatatypeValidator");
			clazz = Class.forName("org.apache.xerces.impl.dv.dtd.NOTATIONDatatypeValidator");
			clazz = Class.forName("org.apache.xerces.impl.dv.dtd.StringDatatypeValidator");
			clazz = Class.forName("org.apache.xerces.impl.io.ASCIIReader");
			clazz = Class.forName("org.apache.xerces.impl.io.MalformedByteSequenceException");
			clazz = Class.forName("org.apache.xerces.impl.io.UCSReader");
			clazz = Class.forName("org.apache.xerces.impl.io.UTF8Reader");
			clazz = Class.forName("org.apache.xerces.impl.msg.XMLMessageFormatter");
			clazz = Class.forName("org.apache.xerces.impl.validation.EntityState");
			clazz = Class.forName("org.apache.xerces.impl.validation.ValidationManager");
			clazz = Class.forName("org.apache.xerces.impl.validation.ValidationState");
			clazz = Class.forName("org.apache.xerces.impl.xs.XMLSchemaValidator");
			clazz = Class.forName("org.apache.xerces.impl.xs.identity.FieldActivator");
			clazz = Class.forName("org.apache.xerces.jaxp.DocumentBuilderFactoryImpl");
			clazz = Class.forName("org.apache.xerces.jaxp.DocumentBuilderImpl");
			clazz = Class.forName("org.apache.xerces.jaxp.JAXPConstants");
			clazz = Class.forName("org.apache.xerces.jaxp.JAXPValidatorComponent");
			clazz = Class.forName("org.apache.xerces.jaxp.TeeXMLDocumentFilterImpl");
			clazz = Class.forName("org.apache.xerces.parsers.AbstractDOMParser");
			clazz = Class.forName("org.apache.xerces.parsers.AbstractXMLDocumentParser");
			clazz = Class.forName("org.apache.xerces.parsers.DOMParser");
			clazz = Class.forName("org.apache.xerces.parsers.ObjectFactory$ConfigurationError");
			clazz = Class.forName("org.apache.xerces.parsers.ObjectFactory");
			clazz = Class.forName("org.apache.xerces.parsers.SecuritySupport$1");
			clazz = Class.forName("org.apache.xerces.parsers.SecuritySupport$2");
			clazz = Class.forName("org.apache.xerces.parsers.SecuritySupport$4");
			clazz = Class.forName("org.apache.xerces.parsers.SecuritySupport$6");
			clazz = Class.forName("org.apache.xerces.parsers.SecuritySupport$7");
			clazz = Class.forName("org.apache.xerces.parsers.SecuritySupport");
			clazz = Class.forName("org.apache.xerces.parsers.XIncludeAwareParserConfiguration");
			clazz = Class.forName("org.apache.xerces.parsers.XML11Configurable");
			clazz = Class.forName("org.apache.xerces.parsers.XML11Configuration");
			clazz = Class.forName("org.apache.xerces.parsers.XMLParser");
			clazz = Class.forName("org.apache.xerces.util.AugmentationsImpl$AugmentationsItemsContainer");
			clazz = Class.forName("org.apache.xerces.util.AugmentationsImpl$LargeContainer");
			clazz = Class.forName("org.apache.xerces.util.AugmentationsImpl$SmallContainer");
			clazz = Class.forName("org.apache.xerces.util.AugmentationsImpl");
			clazz = Class.forName("org.apache.xerces.util.MessageFormatter");
			clazz = Class.forName("org.apache.xerces.util.NamespaceSupport");
			clazz = Class.forName("org.apache.xerces.util.ParserConfigurationSettings");
			clazz = Class.forName("org.apache.xerces.util.SymbolTable$Entry");
			clazz = Class.forName("org.apache.xerces.util.SymbolTable");
			clazz = Class.forName("org.apache.xerces.util.URI$MalformedURIException");
			clazz = Class.forName("org.apache.xerces.util.XMLAttributesImpl$Attribute");
			clazz = Class.forName("org.apache.xerces.util.XMLAttributesImpl");
			clazz = Class.forName("org.apache.xerces.util.XMLChar");
			clazz = Class.forName("org.apache.xerces.util.XMLResourceIdentifierImpl");
			clazz = Class.forName("org.apache.xerces.util.XMLStringBuffer");
			clazz = Class.forName("org.apache.xerces.util.XMLSymbols");
			clazz = Class.forName("org.apache.xerces.xni.Augmentations");
			clazz = Class.forName("org.apache.xerces.xni.NamespaceContext");
			clazz = Class.forName("org.apache.xerces.xni.QName");
			clazz = Class.forName("org.apache.xerces.xni.XMLAttributes");
			clazz = Class.forName("org.apache.xerces.xni.XMLDTDContentModelHandler");
			clazz = Class.forName("org.apache.xerces.xni.XMLDTDHandler");
			clazz = Class.forName("org.apache.xerces.xni.XMLDocumentHandler");
			clazz = Class.forName("org.apache.xerces.xni.XMLLocator");
			clazz = Class.forName("org.apache.xerces.xni.XMLResourceIdentifier");
			clazz = Class.forName("org.apache.xerces.xni.XMLString");
			clazz = Class.forName("org.apache.xerces.xni.XNIException");
			clazz = Class.forName("org.apache.xerces.xni.grammars.Grammar");
			clazz = Class.forName("org.apache.xerces.xni.grammars.XMLDTDDescription");
			clazz = Class.forName("org.apache.xerces.xni.grammars.XMLGrammarDescription");
			clazz = Class.forName("org.apache.xerces.xni.grammars.XMLGrammarLoader");
			clazz = Class.forName("org.apache.xerces.xni.grammars.XMLGrammarPool");
			clazz = Class.forName("org.apache.xerces.xni.parser.XMLComponent");
			clazz = Class.forName("org.apache.xerces.xni.parser.XMLComponentManager");
			clazz = Class.forName("org.apache.xerces.xni.parser.XMLConfigurationException");
			clazz = Class.forName("org.apache.xerces.xni.parser.XMLDTDContentModelFilter");
			clazz = Class.forName("org.apache.xerces.xni.parser.XMLDTDContentModelSource");
			clazz = Class.forName("org.apache.xerces.xni.parser.XMLDTDFilter");
			clazz = Class.forName("org.apache.xerces.xni.parser.XMLDTDScanner");
			clazz = Class.forName("org.apache.xerces.xni.parser.XMLDTDSource");
			clazz = Class.forName("org.apache.xerces.xni.parser.XMLDocumentFilter");
			clazz = Class.forName("org.apache.xerces.xni.parser.XMLDocumentScanner");
			clazz = Class.forName("org.apache.xerces.xni.parser.XMLDocumentSource");
			clazz = Class.forName("org.apache.xerces.xni.parser.XMLEntityResolver");
			clazz = Class.forName("org.apache.xerces.xni.parser.XMLErrorHandler");
			clazz = Class.forName("org.apache.xerces.xni.parser.XMLInputSource");
			clazz = Class.forName("org.apache.xerces.xni.parser.XMLParseException");
			clazz = Class.forName("org.apache.xerces.xni.parser.XMLParserConfiguration");
			clazz = Class.forName("org.apache.xerces.xni.parser.XMLPullParserConfiguration");
			clazz = Class.forName("org.apache.xerces.xs.ItemPSVI");
			clazz = Class.forName("org.apache.xerces.xs.XSObject");
			clazz = Class.forName("org.apache.xerces.xs.XSSimpleTypeDefinition");
			clazz = Class.forName("org.apache.xerces.xs.XSTypeDefinition");
			clazz = Class.forName("org.jaxen.BaseXPath");
			clazz = Class.forName("org.jaxen.Context");
			clazz = Class.forName("org.jaxen.ContextSupport");
			clazz = Class.forName("org.jaxen.DefaultNavigator");
			clazz = Class.forName("org.jaxen.Function");
			clazz = Class.forName("org.jaxen.FunctionCallException");
			clazz = Class.forName("org.jaxen.FunctionContext");
			clazz = Class.forName("org.jaxen.JaxenException");
			clazz = Class.forName("org.jaxen.JaxenHandler");
			clazz = Class.forName("org.jaxen.JaxenRuntimeException");
			clazz = Class.forName("org.jaxen.NamedAccessNavigator");
			clazz = Class.forName("org.jaxen.NamespaceContext");
			clazz = Class.forName("org.jaxen.Navigator");
			clazz = Class.forName("org.jaxen.QualifiedName");
			clazz = Class.forName("org.jaxen.SimpleFunctionContext");
			clazz = Class.forName("org.jaxen.SimpleNamespaceContext");
			clazz = Class.forName("org.jaxen.SimpleVariableContext");
			clazz = Class.forName("org.jaxen.UnresolvableException");
			clazz = Class.forName("org.jaxen.UnsupportedAxisException");
			clazz = Class.forName("org.jaxen.VariableContext");
			clazz = Class.forName("org.jaxen.XPath");
			clazz = Class.forName("org.jaxen.XPathFunctionContext");
			clazz = Class.forName("org.jaxen.XPathSyntaxException");
			clazz = Class.forName("org.jaxen.expr.AllNodeStep");
			clazz = Class.forName("org.jaxen.expr.BinaryExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultAbsoluteLocationPath");
			clazz = Class.forName("org.jaxen.expr.DefaultAllNodeStep");
			clazz = Class.forName("org.jaxen.expr.DefaultAndExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultBinaryExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultEqualityExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultEqualsExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultFilterExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultFunctionCallExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultGreaterThanExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultLiteralExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultLocationPath");
			clazz = Class.forName("org.jaxen.expr.DefaultLogicalExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultNameStep");
			clazz = Class.forName("org.jaxen.expr.DefaultNotEqualsExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultNumberExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultOrExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultPathExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultPredicate");
			clazz = Class.forName("org.jaxen.expr.DefaultRelationalExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultRelativeLocationPath");
			clazz = Class.forName("org.jaxen.expr.DefaultStep");
			clazz = Class.forName("org.jaxen.expr.DefaultTruthExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultUnionExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultVariableReferenceExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultXPathExpr");
			clazz = Class.forName("org.jaxen.expr.DefaultXPathFactory");
			clazz = Class.forName("org.jaxen.expr.EqualityExpr");
			clazz = Class.forName("org.jaxen.expr.Expr");
			clazz = Class.forName("org.jaxen.expr.FilterExpr");
			clazz = Class.forName("org.jaxen.expr.FunctionCallExpr");
			clazz = Class.forName("org.jaxen.expr.IdentitySet$IdentityWrapper");
			clazz = Class.forName("org.jaxen.expr.IdentitySet");
			clazz = Class.forName("org.jaxen.expr.LiteralExpr");
			clazz = Class.forName("org.jaxen.expr.LocationPath");
			clazz = Class.forName("org.jaxen.expr.LogicalExpr");
			clazz = Class.forName("org.jaxen.expr.NameStep");
			clazz = Class.forName("org.jaxen.expr.NodeComparator");
			clazz = Class.forName("org.jaxen.expr.NumberExpr");
			clazz = Class.forName("org.jaxen.expr.PathExpr");
			clazz = Class.forName("org.jaxen.expr.Predicate");
			clazz = Class.forName("org.jaxen.expr.PredicateSet");
			clazz = Class.forName("org.jaxen.expr.Predicated");
			clazz = Class.forName("org.jaxen.expr.RelationalExpr");
			clazz = Class.forName("org.jaxen.expr.Step");
			clazz = Class.forName("org.jaxen.expr.UnionExpr");
			clazz = Class.forName("org.jaxen.expr.VariableReferenceExpr");
			clazz = Class.forName("org.jaxen.expr.Visitable");
			clazz = Class.forName("org.jaxen.expr.XPathExpr");
			clazz = Class.forName("org.jaxen.expr.XPathFactory");
			clazz = Class.forName("org.jaxen.expr.iter.IterableAncestorAxis");
			clazz = Class.forName("org.jaxen.expr.iter.IterableAncestorOrSelfAxis");
			clazz = Class.forName("org.jaxen.expr.iter.IterableAttributeAxis");
			clazz = Class.forName("org.jaxen.expr.iter.IterableAxis");
			clazz = Class.forName("org.jaxen.expr.iter.IterableChildAxis");
			clazz = Class.forName("org.jaxen.expr.iter.IterableDescendantAxis");
			clazz = Class.forName("org.jaxen.expr.iter.IterableDescendantOrSelfAxis");
			clazz = Class.forName("org.jaxen.expr.iter.IterableFollowingAxis");
			clazz = Class.forName("org.jaxen.expr.iter.IterableFollowingSiblingAxis");
			clazz = Class.forName("org.jaxen.expr.iter.IterableNamespaceAxis");
			clazz = Class.forName("org.jaxen.expr.iter.IterableParentAxis");
			clazz = Class.forName("org.jaxen.expr.iter.IterablePrecedingAxis");
			clazz = Class.forName("org.jaxen.expr.iter.IterablePrecedingSiblingAxis");
			clazz = Class.forName("org.jaxen.expr.iter.IterableSelfAxis");
			clazz = Class.forName("org.jaxen.function.BooleanFunction");
			clazz = Class.forName("org.jaxen.function.CeilingFunction");
			clazz = Class.forName("org.jaxen.function.ConcatFunction");
			clazz = Class.forName("org.jaxen.function.ContainsFunction");
			clazz = Class.forName("org.jaxen.function.CountFunction");
			clazz = Class.forName("org.jaxen.function.FalseFunction");
			clazz = Class.forName("org.jaxen.function.FloorFunction");
			clazz = Class.forName("org.jaxen.function.IdFunction");
			clazz = Class.forName("org.jaxen.function.LangFunction");
			clazz = Class.forName("org.jaxen.function.LastFunction");
			clazz = Class.forName("org.jaxen.function.LocalNameFunction");
			clazz = Class.forName("org.jaxen.function.NameFunction");
			clazz = Class.forName("org.jaxen.function.NamespaceUriFunction");
			clazz = Class.forName("org.jaxen.function.NormalizeSpaceFunction");
			clazz = Class.forName("org.jaxen.function.NotFunction");
			clazz = Class.forName("org.jaxen.function.NumberFunction");
			clazz = Class.forName("org.jaxen.function.PositionFunction");
			clazz = Class.forName("org.jaxen.function.RoundFunction");
			clazz = Class.forName("org.jaxen.function.StartsWithFunction");
			clazz = Class.forName("org.jaxen.function.StringFunction");
			clazz = Class.forName("org.jaxen.function.StringLengthFunction");
			clazz = Class.forName("org.jaxen.function.SubstringAfterFunction");
			clazz = Class.forName("org.jaxen.function.SubstringBeforeFunction");
			clazz = Class.forName("org.jaxen.function.SubstringFunction");
			clazz = Class.forName("org.jaxen.function.SumFunction");
			clazz = Class.forName("org.jaxen.function.TranslateFunction");
			clazz = Class.forName("org.jaxen.function.TrueFunction");
			clazz = Class.forName("org.jaxen.function.ext.EndsWithFunction");
			clazz = Class.forName("org.jaxen.function.ext.EvaluateFunction");
			clazz = Class.forName("org.jaxen.function.ext.LocaleFunctionSupport");
			clazz = Class.forName("org.jaxen.function.ext.LowerFunction");
			clazz = Class.forName("org.jaxen.function.ext.MatrixConcatFunction");
			clazz = Class.forName("org.jaxen.function.ext.UpperFunction");
			clazz = Class.forName("org.jaxen.function.xslt.DocumentFunction");
			clazz = Class.forName("org.jaxen.saxpath.Axis");
			clazz = Class.forName("org.jaxen.saxpath.SAXPathEventSource");
			clazz = Class.forName("org.jaxen.saxpath.SAXPathException");
			clazz = Class.forName("org.jaxen.saxpath.XPathHandler");
			clazz = Class.forName("org.jaxen.saxpath.XPathReader");
			clazz = Class.forName("org.jaxen.saxpath.XPathSyntaxException");
			clazz = Class.forName("org.jaxen.saxpath.base.Token");
			clazz = Class.forName("org.jaxen.saxpath.base.Verifier");
			clazz = Class.forName("org.jaxen.saxpath.base.XPathLexer");
			clazz = Class.forName("org.jaxen.saxpath.base.XPathReader");
			clazz = Class.forName("org.jaxen.saxpath.helpers.DefaultXPathHandler");
			clazz = Class.forName("org.jaxen.saxpath.helpers.XPathReaderFactory");
			clazz = Class.forName("org.jaxen.util.AncestorAxisIterator");
			clazz = Class.forName("org.jaxen.util.AncestorOrSelfAxisIterator");
			clazz = Class.forName("org.jaxen.util.DescendantAxisIterator");
			clazz = Class.forName("org.jaxen.util.DescendantOrSelfAxisIterator");
			clazz = Class.forName("org.jaxen.util.SelfAxisIterator");
			clazz = Class.forName("org.jaxen.util.SingleObjectIterator");
			clazz = Class.forName("org.jaxen.util.SingletonList");
			clazz = Class.forName("org.slf4j.ILoggerFactory");
			clazz = Class.forName("org.slf4j.Logger");
			clazz = Class.forName("org.slf4j.LoggerFactory");
			clazz = Class.forName("org.slf4j.Marker");
			clazz = Class.forName("org.slf4j.helpers.FormattingTuple");
			clazz = Class.forName("org.slf4j.helpers.MarkerIgnoringBase");
			clazz = Class.forName("org.slf4j.helpers.MessageFormatter");
			clazz = Class.forName("org.slf4j.helpers.NOPLogger");
			clazz = Class.forName("org.slf4j.helpers.NOPLoggerFactory");
			clazz = Class.forName("org.slf4j.helpers.NamedLoggerBase");
			clazz = Class.forName("org.slf4j.helpers.SubstituteLoggerFactory");
			clazz = Class.forName("org.slf4j.helpers.Util");
			clazz = Class.forName("org.slf4j.impl.SimpleLogger$1");
			clazz = Class.forName("org.slf4j.impl.SimpleLogger");
			clazz = Class.forName("org.slf4j.impl.SimpleLoggerFactory");
			clazz = Class.forName("org.slf4j.impl.StaticLoggerBinder");
			clazz = Class.forName("org.slf4j.spi.LoggerFactoryBinder");
			clazz = Class.forName("soot.rtlib.tamiflex.IUnexpectedReflectiveCallHandler");
			clazz = Class.forName("soot.rtlib.tamiflex.OpaquePredicate");
			clazz = Class.forName("soot.rtlib.tamiflex.ReflectiveCalls");
			clazz = Class.forName("soot.rtlib.tamiflex.ReflectiveCallsWrapper");
			clazz = Class.forName("soot.rtlib.tamiflex.SootSig");
			clazz = Class.forName("soot.rtlib.tamiflex.UnexpectedReflectiveCall");

		} catch (Exception ex ) {
			assert(false) : ex.toString();
		}
	}
	
	public static void premain(String args, Instrumentation inst) {
		System.out.println("Class Resolver Agent begin");

	}
}
